"use strict";

//структура, которая содержит элементы по порядку.

const arr = [1, 2, 3, 6, 8];

console.log(arr.length);

/*
На собеседовании могут спросить, как соотносится между собой свойство
length и порядковые номера внутри этого массива.

Ответ: length состоит из последнего индекса массива + 1.
*/
//можно нарушить правила массивов и элементы будут не по порядку, например
const arr2 = [122, 21, 344, 42, 5];
arr2[99] = 0;
console.log(arr2.length); //100
console.log(arr2); //[ 122, 21, 344, 42, 5, <94 empty items>, 0 ]
//так нельзя делать как выше
//методы, работующие с концом массива:

arr.pop(); //удаляет элемент в конце
arr.push(10); //добавляет элемент в конец массива
console.log(arr);

/*
добавление в начало  и удаление  unshift и shift соответственно:
как только работаем с началом элементом, то мы не просто добавляем
или убираем элемент в конец, мы меняем все последующие индексы, тк происходит
сдвиг, а значит сложность такого действия будет O(n), а не O(1);

Поэтому эти методы редко используются.
*/
//чтобы перебрать массив, можно использовать как обычный цикл
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}

/*
также, можно использовать for of. Внутри задаем переменную,
которая будет отражать каждый отдельный элемент в массиве

Объекты нельзя перебрать с помощью for of, но можно для массиво-подобных сущностей,
для строки тоже можно, для псевдомассивов, map и Set.
*/
for (let value of arr) {
  console.log(value);
}

let str = "Пример строки";
for (let char of str) {
  console.log(char); // Выведет каждый символ строки по очереди
}

//forEach позволяет гипко перебрать элементы внутри массива. Тут используется коллбэк функция (тк метод это функция)
//коллбэк функция нужна, чтобы выполнится строго после определенных действий
arr.forEach(function (item, i, arr) {
  //Эта функция будет выполнятся каждый раз для каждого элемента массива и ее можно гипко настроить
  //1 аргумент функции - тот элемент, который перебираем. Задаем в качестве аргумента, item, button и тд
  //2 аргумент - номер по порядку, когда перебираем каждый элемент, можем сохранить этот номер, например 0, 1, 2 и тд
  //3 элемент - ссылка на массив, который перебираем.
  console.log(`${i}: ${item} внутри массива ${arr}`);
});
//forEach часто используется, например если есть элементы со страницы, мы их сможем перебрать и, например, каждой кнопке назначить дополнительный класс.
//Или например взять текстовый элемент по определенному селектору и как то его модифицировать.

//в целом постоянно можно использовать fprEach, но в for of есть плюс: можно использовать break и continue

//Метод forEach Занимается перебором. Есть еще несколько перебирающих методов, которые занимаются трансформацией массива.

//метод map например возвращает новый массив, уже модифицируемый, тоже самое с filter, отфильтровываем массив по критерию (например оставить четные масствы, или когда тип данных строка.)

//методы split join и sort

/*
split - для строк
От пользователя или от сервера получили большую строку, где через запятую написаны товары.
Хотим превратить в обычный массив. Сделать это можно через split
*/
const str = prompt("");
const products = str.split(", "); //указываем, через какой разделитель будут товары в строке
products.sort();
/*
Метод sort() в JavaScript изменяет исходный массив, сортируя его элементы!!!

для массивов метод сортировки - sort, без аргументов сортирует в алфовитном порядке.
сортирует элементы массива как строки, если там будут числа, он отсортирует не по возрастанию цифр, а посимвольно, 
например числа 2, 26, 8, 13, 10 станут в массиве 10, 13, 2, 26, 8 (по символьно, у десятке первая единица, 10 и 13 на 
первое место пойдет 10 тк первая цифра числа одинаковая, а она идет как главная, сравнивается вторая, 0 меньше тройки, и тд).

Но! во внутрь принимается коллбэк функция, мы можем указать, как именно сортировать массив, например:
*/
console.log(products);

const numArr = [2, 123, 3, 55, 1, 15];

function compareNum(a, b) {
  return a - b; //частый паттерн для сортировки чисел по возрастанию
}
/*
внутри себя метод sort использует алгоритм быстрой сортировки, это надо почитать по ссылке к 33, чтобы понять как работает эта функция.
*/
numArr.sort(compareNum);
console.log(numArr);

//допустим пользователь ввел "дом, бмв, эклер", тогда вернется массив ['дом', 'бмв', 'эклер']
//то есть например
//строка будет такая, разделитель по д. В массив попадет все до элемента-разделителя и после. если встречается дд, то это значит что между ними берется пустая строка. после последнего д берется пустая строка тоже.
// бббдб д ббббд , д бддаах д
// ["ббб","б ", " бббб", " , ", " б", "", "аах ", ""]
//если разделять по пустой строке, то будет браться каждый элемент, так как пустая строка между каждым символом

//join - для массивов.
console.log(products.join(": ")); //указываем разделитель, через который будет выводиться элементы на страницу.
//можно на основании массива сформировать большую строку, практическое
//применение - мы можем взять список имен и вывести на экран в качетсве строки, чтобы
//он увидел например список приглашенных гостей.

//понятие псевдомассива - это объект, структура которого совпадает с массивом,
//но у псевдомассива не будет никаких методов таких как push pop forEach sort join
