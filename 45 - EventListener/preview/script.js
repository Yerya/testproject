//в Notion доп инфа. 45 - события и их обработчики
//события - сигнал от браузера, о том, что что то произошло
//может отлавливать эти сигналы.

//обработчик - функция, срабатывает как только событие произошло
//сначала срабатывает функция клика, или отправки, а потом функция

//через DOM дерево

const btn = document.querySelector("button"),
  overlay = document.querySelector(".overlay"),
  link = document.querySelector("a");

// btn.onclick = function () {
//   alert("click");
// };

//выше не практикуется способ тоже, тк если повторяем свойство, то оно заменяет собой первое, то есть обработчики переназначаются
//иногда обработчики надо удалять, это нельзя сделать с способом выше.

//коллбэк функции выполняются строго за другими. То есть сначала клик, потом сама функция коллбэк.
btn.addEventListener("click", () => {
  alert("Click");
});
//и теперь можно назначать несколько действий на один клик. нажмем на кнопку и выполнится 2 этих обработчика сразу
btn.addEventListener("click", () => {
  alert("second click");
});

//ниже при наведении мышью на кнопку будет срабатывать
//иногда надо получать данные о том, какие события произошли
//для этого есть объект Event, он передается первым аргументом всегда как например e, Или event
//можем посмотреть объект event, там например type это событие которое произошло
//target - тот элемент, над которым производится действие.

//например можео удалить элемент наведя на него мышь
btn.addEventListener("mouseenter", (e) => {
  console.log(e);
  //   e.target.remove();
  // console.log("Hover");
});
//чтобы удалить ивент листенер, надо обратиться у функции
let i = 0;
const deleteElement = (e) => {
  console.log(e.target); //элемент над которым события
  ////изначально в консоли ссылвкмся на элемент, над которым изначально было действие. это поправить можно с помощью currentTarget вместо target.
  console.log(e.type); //Тип события
  i++;
  //   if (i == 1) {
  //     btn.removeEventListener("click", deleteElement); //то есть если вызвали больше одного раза, удаляем обработчик событий и функция больше не будет вызываться
  //   }
};

//у addEventListener третьим аргументом можно передать опции, например once, чтобы выполнилось только один раз

btn.addEventListener("click", deleteElement, { once: true }); //крунлых скобок нет, ссылаемся на функцию котрая будет выполнятся
// ниже удалаем евент листенер, при нажатии ничего в консоль не выведится
overlay.addEventListener("click", deleteElement, { once: true });
//Всплытие событий - когда обработчик срабатывает на самом вложенном событии, если он у него есть и поднимаясь все выше и выше по иерархии.
//мы сделали div overlay, и в нем кнопка. на элемент overlay Тоже повесили обработчик событий.
//и при нажатии на кнопку, по иерархии вверх также запустятся обработчики событий для родителей.
//то есть нажали на кнопку баттон, но сработало и для родителя оверлей.

//стандартное поведение браузера можно отменять

link.addEventListener("click", (event) => {
  event.preventDefault(); //метод, который говорит, что не надо переходить по ссылке
  //будем делать какие то другие действия, которые ниже.

  console.log(event.target); //например выводится элемент на которое нажали
});

//если надо один и тот же функционал повесить на несколько элементов
//нельзя это делать для коллекции если через queryselectorAll, можно например через foreach
const btns = document.querySelectorAll("button");
btns.forEach((btn) => {
  btn.addEventListener("click", (e) => {
    e.target.remove();
  });
});
