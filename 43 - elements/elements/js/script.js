"use strict";

//DOM - document object model, объектная модель документа.

//создадим вместилище информации, туда поместим элемент, который хотим получить со страницы
//их можно разделить на те, которые появились давно и недавно. Начнем с старых.
const box = document.getElementById("box"); //допустим через уникальный идентификатор box, должен быть один

console.log(box); //внутри консоли vs code нельзя

//также можно по тегу, тк будет несколько тегов, они соберутсо коллекцией в псевдо массив (тоже самое что массив, но без всех методов)
//если тег только один коде, то все ранво будет коллеция из одного элемента

//Это важный момент, тк нельзя обратиться к массиву и например поменять цвет кнопки внутри, надо понимать, что это коллекция
const btns = document.getElementsByTagName("button"); //в btns положили псевдо массив, а не один какой то элемент
console.log(btns);
//чтобы взять конкретную кнопку, надо указать индекс элемента, который нас интересует.
const btn = document.getElementsByTagName("button")[1];
console.log(btn);
//второй способ, когда хочу уже использовать кнопку, можно сделать
console.log(btns[3]);

//можно использовать классы, точно также возвращается коллекция
const circles = document.getElementsByClassName("circle");

console.log(circles);

//лайфхак чтобы запомнить где возвращается элемент а где коллекция -
//getElementsByClassName и document.getElementsByTagName - во мн. числе,
//а document.getElementById - в единственном числе.

//ниже более современные методы.

//внутрь скобок указываем css селектор, абсолютно любой, это может быть
//id через решетку, класс, вложенность классов и тд, атрибуты
const hearts = document.querySelectorAll(".heart");
console.log(hearts);
//можно также использовать метод foreach
hearts.forEach((item, i) => {
  console.log(item);
});
//получаем коллекцию

//с помощью queryselector получаем первый элемент, выгодно использовать с уникальными селекторами.

const oneHeart = document.querySelector(".heart");
console.log(oneHeart);
